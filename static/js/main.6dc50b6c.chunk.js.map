{"version":3,"sources":["store/todo/constants/todo.constants.ts","store/todo/reducers/todo.reducer.ts","store/todo/reducers/index.ts","store/app.store.ts","components/AddTodoForm/index.tsx","components/TodoItem/index.tsx","components/TodoList/index.tsx","containers/todos/index.tsx","store/todo/actions/todo.actions.ts","routes/index.tsx","containers/app/index.tsx","index.tsx"],"names":["TODO_ACTION_TYPES","initialState","todos","rootReducer","combineReducers","todo","state","action","type","ADD_TODO_SUCCESS","Object","assign","concat","payload","id","uuidV1","TOGGLE_TODO_STATUS_SUCCESS","map","completed","REMOVE_TODO_SUCCESS","filter","reduxPersistConfig","key","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","AddTodoForm","onFormSubmit","useForm","form","onFinish","name","getFieldValue","resetFields","layout","className","gutter","xs","sm","md","lg","xl","Item","rules","required","message","placeholder","htmlType","block","PlusCircleFilled","TodoItem","onTodoRemoval","onTodoToggle","actions","title","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","onChange","defaultChecked","onConfirm","danger","color","TodoList","locale","emptyText","dataSource","renderItem","pagination","position","pageSize","TodosContainer","useSelector","dispatch","useDispatch","justify","align","span","subTitle","addTodo","success","removeTodo","warn","toggleTodoStatus","info","Routes","path","exact","component","App","storePersistor","loading","targetHTMLElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.6dc50b6c.chunk.js","sourcesContent":["export enum TODO_ACTION_TYPES {\n  ADD_TODO_SUCCESS,\n  TOGGLE_TODO_STATUS_SUCCESS,\n  REMOVE_TODO_SUCCESS,\n}\n","import { TODO_ACTION_TYPES } from '../constants';\nimport { ITodo } from '../models/todo.model';\nimport { TodoActionTypes } from '../actions/todo.actions.types';\nimport { v1 as uuidV1 } from 'uuid';\n\ninterface ITodoReducerInterface {\n  todos: ITodo[];\n}\n\nexport const initialState: ITodoReducerInterface = {\n  todos: [],\n};\n\nexport const todoReducer = (state = initialState, action: TodoActionTypes) => {\n  switch (action?.type) {\n    case TODO_ACTION_TYPES.ADD_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.concat({\n          ...action.payload,\n          ...{\n            id: action.payload.id ?? uuidV1(),\n          },\n        }),\n      });\n    case TODO_ACTION_TYPES.TOGGLE_TODO_STATUS_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.map((todo: ITodo) =>\n          todo.id === action.payload.id\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        ),\n      });\n    case TODO_ACTION_TYPES.REMOVE_TODO_SUCCESS:\n      return {\n        todos: state.todos.filter(\n          (todo: ITodo) => todo.id !== action.payload.id\n        ),\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { todoReducer } from './todo.reducer';\n\nexport const rootReducer = combineReducers({\n  todo: todoReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nimport { rootReducer } from 'store/todo/reducers';\n\nconst reduxPersistConfig: PersistConfig<any> = {\n  key: 'application',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst pReducer = persistReducer(reduxPersistConfig, rootReducer);\n\nexport const store: Store = createStore(pReducer, applyMiddleware(thunk));\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nimport './styles.less';\nimport { ITodo } from 'store/todo/models/todo.model';\n\ninterface IAddTodoFormProps {\n  onFormSubmit: (todo: ITodo) => void;\n}\n\nexport const AddTodoForm: React.FC<IAddTodoFormProps> = ({ onFormSubmit }) => {\n  const [form] = Form.useForm();\n\n  const onFinish = () => {\n    onFormSubmit({\n      name: form.getFieldValue('name'),\n    });\n\n    form.resetFields();\n  };\n\n  return (\n    <Form\n      form={form}\n      onFinish={onFinish}\n      layout=\"horizontal\"\n      className=\"todo-form\"\n    >\n      <Row gutter={20}>\n        <Col xs={24} sm={24} md={17} lg={19} xl={20}>\n          <Form.Item\n            name={'name'}\n            rules={[{ required: true, message: 'This field is required' }]}\n          >\n            <Input placeholder=\"What needs to be done?\" />\n          </Form.Item>\n        </Col>\n        <Col xs={24} sm={24} md={7} lg={5} xl={4}>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            <PlusCircleFilled />\n            Add todo\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { Tooltip, Tag, List, Button, Popconfirm, Switch } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\n\nimport './styles.less';\nimport { ITodo } from 'store/todo/models/todo.model';\n\ninterface ITodoItemProps {\n  todo: ITodo;\n  onTodoRemoval: (todo: ITodo) => void;\n  onTodoToggle: (todo: ITodo) => void;\n}\n\nexport const TodoItem: React.FC<ITodoItemProps> = ({\n  todo,\n  onTodoRemoval,\n  onTodoToggle,\n}) => {\n  return (\n    <List.Item\n      actions={[\n        <Tooltip\n          title={todo.completed ? 'Mark as uncompleted' : 'Mark as completed'}\n        >\n          <Switch\n            checkedChildren={<CheckOutlined />}\n            unCheckedChildren={<CloseOutlined />}\n            onChange={() => onTodoToggle(todo)}\n            defaultChecked={todo.completed}\n          />\n        </Tooltip>,\n        <Popconfirm\n          title=\"Are you sure you want to delete?\"\n          onConfirm={() => {\n            onTodoRemoval(todo);\n          }}\n        >\n          <Button className=\"remove-todo-button\" type=\"primary\" danger>\n            X\n          </Button>\n        </Popconfirm>,\n      ]}\n      className=\"list-item\"\n      key={todo.id}\n    >\n      <div className=\"todo-item\">\n        <Tag color={todo.completed ? 'cyan' : 'red'} className=\"todo-tag\">\n          {todo.name}\n        </Tag>\n      </div>\n    </List.Item>\n  );\n};\n","import React from 'react';\n\nimport { List } from 'antd';\n\nimport { ITodo } from 'store/todo/models/todo.model';\nimport { TodoItem } from 'components/TodoItem';\n\ninterface ITodoListProps {\n  todos: ITodo[];\n  onTodoRemoval: (todo: ITodo) => void;\n  onTodoToggle: (todo: ITodo) => void;\n}\n\nexport const TodoList: React.FC<ITodoListProps> = ({\n  todos,\n  onTodoRemoval,\n  onTodoToggle,\n}) => (\n  <List\n    locale={{\n      emptyText: \"There's nothing to do :(\",\n    }}\n    dataSource={todos}\n    renderItem={(todo) => (\n      <TodoItem\n        todo={todo}\n        onTodoToggle={onTodoToggle}\n        onTodoRemoval={onTodoRemoval}\n      />\n    )}\n    pagination={{\n      position: 'bottom',\n      pageSize: 10,\n    }}\n  />\n);\n","import React from 'react';\nimport { Row, Col, Card, PageHeader } from 'antd';\n\nimport { ITodo } from 'store/todo/models/todo.model';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTodo, removeTodo, toggleTodoStatus } from 'store/todo/actions';\nimport { RootState } from 'store/todo/reducers';\nimport { AddTodoForm } from 'components/AddTodoForm';\nimport { TodoList } from 'components/TodoList';\nimport { message } from 'antd';\n\nimport './styles.less';\n\ninterface ITodosContainerProps {}\n\nexport const TodosContainer: React.FunctionComponent<ITodosContainerProps> = () => {\n  const todos: ITodo[] = useSelector((state: RootState) => state.todo.todos);\n\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = (todo: ITodo): void => {\n    dispatch(addTodo(todo));\n    message.success('Todo added!');\n  };\n\n  const handleRemoveTodo = (todo: ITodo): void => {\n    dispatch(removeTodo(todo));\n    message.warn('Todo removed!');\n  };\n\n  const handleToggleTodoStatus = (todo: ITodo): void => {\n    dispatch(toggleTodoStatus(todo));\n    message.info('Todo state updated!');\n  };\n\n  return (\n    <Row\n      justify=\"center\"\n      align=\"middle\"\n      gutter={[0, 20]}\n      className=\"todos-container\"\n    >\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <PageHeader\n          title=\"Add Todo\"\n          subTitle=\"To add a todo, just fill the form below and click in add todo.\"\n        />\n      </Col>\n\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <Card title=\"Create a new todo\">\n          <AddTodoForm onFormSubmit={handleFormSubmit} />\n        </Card>\n      </Col>\n\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <Card title=\"Todo List\">\n          <TodoList\n            todos={todos}\n            onTodoRemoval={handleRemoveTodo}\n            onTodoToggle={handleToggleTodoStatus}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n","import { ITodo } from '../models/todo.model';\nimport { TodoActionTypes } from './todo.actions.types';\nimport { TODO_ACTION_TYPES } from '../constants';\n\nexport function addTodo(todo: ITodo): TodoActionTypes {\n  return {\n    type: TODO_ACTION_TYPES.ADD_TODO_SUCCESS,\n    payload: todo,\n  };\n}\n\nexport function removeTodo(todo: ITodo): TodoActionTypes {\n  return {\n    type: TODO_ACTION_TYPES.REMOVE_TODO_SUCCESS,\n    payload: todo,\n  };\n}\n\nexport function toggleTodoStatus(todo: ITodo): TodoActionTypes {\n  return {\n    type: TODO_ACTION_TYPES.TOGGLE_TODO_STATUS_SUCCESS,\n    payload: todo,\n  };\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { TodosContainer } from 'containers/todos';\n\ninterface IRoutesProps {}\n\nexport const Routes: React.FC<IRoutesProps> = () => (\n  <Switch>\n    <Route path=\"/\" exact={true} component={TodosContainer} />\n  </Switch>\n);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Routes } from 'routes';\nimport { Store } from 'redux';\nimport { Persistor } from 'redux-persist';\n\ninterface IAppProps {\n  store: Store;\n  storePersistor: Persistor;\n}\n\nexport const App: React.FC<IAppProps> = ({ store, storePersistor }) => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<div>Loading...</div>} persistor={storePersistor}>\n        <HashRouter>\n          <Routes />\n        </HashRouter>\n      </PersistGate>\n    </Provider>\n  );\n};\n","import React from 'react';\n\nimport 'assets/styles/base.less';\n\nimport { render } from 'react-dom';\n\nimport { store, persistor } from 'store/app.store';\n\nimport { App } from 'containers/app';\n\nconst targetHTMLElement = document.getElementById('root');\n\nrender(<App store={store} storePersistor={persistor} />, targetHTMLElement);\n"],"sourceRoot":""}